// Code generated by mockery v2.46.1. DO NOT EDIT.

package mock

import (
	models "garantex/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PriceService is an autogenerated mock type for the PriceService type
type PriceService struct {
	mock.Mock
}

// GetPrice provides a mock function with given fields:
func (_m *PriceService) GetPrice() (models.Price, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrice")
	}

	var r0 models.Price
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.Price, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.Price); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Price)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePrice provides a mock function with given fields: price
func (_m *PriceService) SavePrice(price models.Price) error {
	ret := _m.Called(price)

	if len(ret) == 0 {
		panic("no return value specified for SavePrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Price) error); ok {
		r0 = rf(price)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPriceService creates a new instance of PriceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceService {
	mock := &PriceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
